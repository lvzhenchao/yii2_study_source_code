<?php

namespace backend\modules\event\controllers;

use backend\modules\event\events\MsgAfterEvent;
use backend\modules\event\events\MsgBeforeEvent;
use backend\modules\event\models\MsgHandler;
use function Symfony\Component\String\s;
use yii\web\Controller;

/**
 * Default controller for the `event` module
 */
class EventTestController extends Controller
{
    //定义事件名称
    const BERORE_SEND = 'before_send_msg';
    const AFTER_SEND  = 'after_send_msg';

    //初始化
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->registerEventHandler();
    }

    public function registerEventHandler()
    {
        //事件处理类
        $msgHandler = new MsgHandler();
        //绑定事件时，可以传入第三个参数，该参数将会保存到Event类的data属性中
        $this->on(self::BERORE_SEND, [$msgHandler, 'beforeSendMsg'], 'who');
        $this->on(self::AFTER_SEND,  [$msgHandler, 'afterSendMsg']);

    }

    //对外测试方法
    public function actionIndex()
    {
        //定义发送前事件类：用于触发事件时传递数据
        $msgBefore = new MsgBeforeEvent();
        $msgBefore->date = date("Y-m-d H:i:s");
        //触发发送消息前的事件，传入事件类的实例对象，这里的对象充当了保存临时数据的角色
        $this->trigger(self::BERORE_SEND, $msgBefore);

        echo "发送消息......";

        $msgAfter = new MsgAfterEvent();
        $msgAfter->from = "Jack";
        $msgAfter->to = "Tom";
        $msgAfter->msg = "Hello 啊";
        $this->trigger(self::AFTER_SEND, $msgAfter);
    }

}

















